name: 构建Docker测试

on:
  push:
    branches: [ 'main' ]
    paths: [ '.github/workflows/buildDockerTest.yml' ]

env:
  REGISTRY_IMAGE: dr34m/docker-test
  REGISTRY_LABEL: v0.0.1-test

jobs:
  get-version:
    name: 获取版本号
    runs-on: ubuntu-latest
    outputs:
      TAG_LIST: ${{steps.getVersion.outputs.TAG_LIST}}
      VERSION: ${{steps.getVersion.outputs.VERSION}}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - id: getVersion
        name: 获取版本号
        run: |
          versions=$(head -n 1 version.txt)
          tagList=""
          IFS=',' read -ra versionList <<< "$versions"
          cuVersion="${versionList[0]}"
          for version in "${versionList[@]}"; do
            tagList+="$DOCKER_USER/$DOCKER_NAME:$version,"
          done
          tagList=${tagList%?}
          echo "TAG_LIST=$tagList" >> "$GITHUB_OUTPUT"
          echo "VERSION=$cuVersion" >> "$GITHUB_OUTPUT"

  build-docker:
    name: 构建Docker
    runs-on: ubuntu-latest
    needs: [get-version]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 设置QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: 登录到DockerHub
        uses: docker/login-action@v3
        with:
          username: dr34m
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建
        id: build
        uses: docker/build-push-action@v6
        with:
          content: .
          file: Dockerfile.test
          platforms: ${{ matrix.platform }}
          outputs: |
            type=docker
            type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true

      - name: 导出digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: 上传到artifact
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          retention-days: 1

      - name: 读取镜像
        run: |
          docker create --name tmp ${{ steps.build.outputs.imageid }} /bin/true
          docker cp tmp:/app/test.txt test.txt
          cat test.txt

  merge:
    name: 合并镜像上传
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
      - name: 下载digest
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: 设置Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: 登录到DockerHub
        uses: docker/login-action@v3
        with:
          username: dr34m
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 创建清单并推送
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ env.REGISTRY_LABEL }} $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *) 
      
