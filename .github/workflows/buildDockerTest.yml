#name: 构建Docker测试
#
#on:
#  push:
#    branches: [ 'main' ]
#    paths: [ '.github/workflows/buildDockerTest.yml' ]
#
#env:
#  REGISTRY_IMAGE: dr34m/docker-test
#  REGISTRY_LABEL: v0.0.1-test
#
#jobs:
#  get-version:
#    name: 获取版本号
#    runs-on: ubuntu-latest
#    outputs:
#      TAG_LIST: ${{steps.getVersion.outputs.TAG_LIST}}
#      VERSION: ${{steps.getVersion.outputs.VERSION}}
#
#    steps:
#      - name: 检出仓库代码
#        uses: actions/checkout@v4
#
#      - id: getVersion
#        name: 获取版本号
#        run: |
#          versions=$(head -n 1 version.txt)
#          tagList=""
#          IFS=',' read -ra versionList <<< "$versions"
#          cuVersion="${versionList[0]}"
#          for version in "${versionList[@]}"; do
#            tagList+="-t $DOCKER_USER/$DOCKER_NAME:$version "
#          done
#          tagList=${tagList%?}
#          echo "TAG_LIST=$tagList" >> "$GITHUB_OUTPUT"
#          echo "VERSION=$cuVersion" >> "$GITHUB_OUTPUT"
#
#  build-docker:
#    name: 构建Docker
#    runs-on: ubuntu-latest
#    needs: [get-version]
#    env:
#      VERSION: ${{needs.get-version.outputs.VERSION}}
#    strategy:
#      fail-fast: false
#      matrix:
#        platform:
#          - linux/amd64
#          - linux/arm64
#
#    steps:
#      - name: 替换平台名称中的斜杠为横杠
#        run: |
#          platform=${{ matrix.platform }}
#          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
#
#      - name: 检出仓库代码
#        uses: actions/checkout@v4
#
#      - name: 设置QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: 设置Docker BuildX
#        uses: docker/setup-buildx-action@v3
#
#      - name: 登录到DockerHub
#        uses: docker/login-action@v3
#        with:
#          username: dr34m
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: 构建
#        id: build
#        uses: docker/build-push-action@v6
#        with:
#          content: .
#          file: Dockerfile.test
#          platforms: ${{ matrix.platform }}
#          outputs: |
#            type=docker
#            type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
#
#      - name: 导出digest
#        run: |
#          mkdir -p /tmp/digests
#          digest="${{ steps.build.outputs.digest }}"
#          touch "/tmp/digests/${digest#sha256:}"
#
#      - name: 上传digest到artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: digests-${{ env.PLATFORM_PAIR }}
#          path: /tmp/digests/*
#          retention-days: 1
#
#      - name: 从镜像中提取可执行文件
#        run: |
#          docker create --name tmp ${{ steps.build.outputs.imageid }} /bin/true
#          docker cp tmp:/app/test.txt test.txt
#          tar czf "test-$VERSION-$PLATFORM_PAIR.tar.gz" test.txt
#
#      - name: 上传可执行文件到artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: dist-${{ env.PLATFORM_PAIR }}
#          path: test-${{ env.VERSION }}-${{ env.PLATFORM_PAIR }}.tar.gz
#          retention-days: 1
#
#  merge:
#    name: 合并镜像上传
#    runs-on: ubuntu-latest
#    needs: [get-version, build-docker]
#    env:
#      TAG_LIST: ${{needs.get-version.outputs.TAG_LIST}}
#    steps:
#      - name: 下载digest
#        uses: actions/download-artifact@v4
#        with:
#          path: /tmp/digests
#          pattern: digests-*
#          merge-multiple: true
#
#      - name: 设置Docker BuildX
#        uses: docker/setup-buildx-action@v3
#
#      - name: 登录到DockerHub
#        uses: docker/login-action@v3
#        with:
#          username: dr34m
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: 创建清单并推送
#        working-directory: /tmp/digests
#        run: |
#          docker buildx imagetools create ${{ env.TAG_LIST }}$(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
#
