name: 构建

on:
  push:
    branches: [ 'main' ]
    paths: [ 'version.txt' ]

jobs:
  get-version:
    name: 获取版本号
    runs-on: ubuntu-latest
    outputs:
      TAG_LIST: ${{steps.getVersion.outputs.TAG_LIST}}
      VERSION: ${{steps.getVersion.outputs.VERSION}}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - id: getVersion
        name: 获取版本号
        run: |
          versions=$(head -n 1 version.txt)
          tagList=""
          IFS=',' read -ra versionList <<< "$versions"
          cuVersion="${versionList[0]}"
          for version in "${versionList[@]}"; do
            tagList+="dr34m/python-action-demo:$version,"
          done
          tagList=${tagList%?}
          echo "TAG_LIST=$tagList" >> "$GITHUB_OUTPUT"
          echo "VERSION=$cuVersion" >> "$GITHUB_OUTPUT"

  build-frontend:
    name: 构建前端
    runs-on: ubuntu-latest
    needs: [get-version]
    env:
      VERSION: ${{needs.get-version.outputs.VERSION}}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 安装Node.js 14.x
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"

      - name: 安装依赖并构建前端
        run: |
          sed -i "s/__version_placeholder__/$VERSION/g" frontend/src/views/page/setting/index.vue
          cd frontend
          npm install
          npm run build

      - name: 上传artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist
          retention-days: 1

  build-docker:
    name: 构建Docker
    runs-on: ubuntu-latest
    needs: [get-version, build-frontend]
    env:
      TAG_LIST: ${{needs.get-version.outputs.TAG_LIST}}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 下载前端
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: 设置QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置Docker BuildX
        uses: docker/setup-buildx-action@v3

      - name: 登录到DockerHub
        uses: docker/login-action@v3
        with:
          username: dr34m
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建并推送
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.TAG_LIST }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/386,linux/arm/v6,linux/s390x,linux/ppc64le

  build-windows-amd64:
    name: 构建windows amd64
    runs-on: windows-latest
    needs: [build-frontend]

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 下载前端
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: 设置python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装依赖并构建打包
        run: |
          python -m pip install 'pyinstaller>=6,<7'
          python -m pip install -r requirements.txt
          python -m PyInstaller demo.spec
          cd dist && 7z a demo-windows-amd64.zip demo.exe

      - name: 上传artifact
        uses: actions/upload-artifact@v4
        with:
          name: demo-windows-amd64
          path: dist/demo-windows-amd64.zip

  build-darwin-amd64:
    name: 构建darwin amd64
    runs-on: macos-13
    needs: [build-frontend]

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 下载前端
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: 设置python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装依赖并构建打包
        run: |
          python -m pip install 'pyinstaller>=6,<7'
          python -m pip install -r requirements.txt
          python -m PyInstaller demo.spec
          cd dist && tar czf demo-darwin-amd64.tar.gz demo

      - name: 上传artifact
        uses: actions/upload-artifact@v4
        with:
          name: demo-darwin-amd64
          path: dist/demo-darwin-amd64.tar.gz

  build-darwin-arm64:
    name: 构建darwin arm64
    runs-on: macos-14
    needs: [build-frontend]

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 下载前端
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: 设置python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装依赖并构建打包
        run: |
          python -m pip install 'pyinstaller>=6,<7'
          python -m pip install -r requirements.txt
          python -m PyInstaller demo.spec
          cd dist && tar czf demo-darwin-arm64.tar.gz demo

      - name: 上传artifact
        uses: actions/upload-artifact@v4
        with:
          name: demo-darwin-arm64
          path: dist/demo-darwin-arm64.tar.gz

  build-linux-amd64:
    name: 构建linux amd64
    runs-on: ubuntu-latest
    needs: [build-frontend]

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 下载前端
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: 设置python环境
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 安装依赖并构建打包
        run: |
          python -m pip install 'pyinstaller>=6,<7'
          python -m pip install -r requirements.txt
          python -m PyInstaller demo.spec
          cd dist && tar czf demo-linux-amd64.tar.gz demo

      - name: 上传artifact
        uses: actions/upload-artifact@v4
        with:
          name: demo-linux-amd64
          path: dist/demo-linux-amd64.tar.gz

  create-release:
    name: 发布release
    runs-on: ubuntu-latest
    needs: [get-version, build-darwin-amd64, build-windows-amd64, build-darwin-arm64, build-linux-amd64]
    env:
      VERSION: ${{needs.get-version.outputs.VERSION}}

    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 下载构建结果
        uses: actions/download-artifact@v4
        with:
          pattern: demo-*
          path: demo
          merge-multiple: true

      - name: 没有版本日志文件自动创建
        run: |
          LOG_FILE="doc/changelog/$VERSION.md"
          if [ ! -f "$LOG_FILE" ]; then
            touch "$LOG_FILE"
            echo "$VERSION" > "$LOG_FILE"
          fi
          echo "LOG_FILE=$LOG_FILE" >> "$GITHUB_ENV"

      - name: 创建release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          files: demo/*
          body_path: ${{ env.LOG_FILE }}
          prerelease: ${{ contains(env.VERSION, 'dev') || contains(env.VERSION, 'pre') }}